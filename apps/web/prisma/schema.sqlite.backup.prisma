generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      DateTime?
  password           String?
  name               String?
  image              String?
  role               String              @default("USER")
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lastLoginAt        DateTime?
  institution        String?
  researchArea       String?
  bio                String?
  twoFactorEnabled   Boolean             @default(false)
  twoFactorSecret    String?
  accounts           Account[]
  experiments        Experiment[]
  loginAttempts      LoginAttempt[]
  passwordResets     PasswordReset[]
  sessions           Session[]
  profile            UserProfile?
  settings           UserSettings?
  verificationTokens VerificationToken[]
  electrochemicalSystems ElectrochemicalSystem[]
  fuelCellExperiments FuelCellExperiment[]

  @@index([email])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ipAddress String
  userAgent String?
  success   Boolean
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, createdAt])
  @@index([ipAddress, createdAt])
}

model MFCDesign {
  id          String       @id @default(cuid())
  name        String
  type        String
  cost        String
  powerOutput String
  materials   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  experiments Experiment[]
}

model Experiment {
  id           String            @id @default(cuid())
  name         String
  userId       String
  designId     String
  status       String            @default("SETUP")
  parameters   String
  isPublic     Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  design       MFCDesign         @relation(fields: [designId], references: [id])
  user         User              @relation(fields: [userId], references: [id])
  measurements Measurement[]
  papers       ExperimentPaper[]

  @@index([userId])
  @@index([status])
}

model Measurement {
  id           String     @id @default(cuid())
  experimentId String
  voltage      Float
  current      Float
  power        Float
  temperature  Float
  ph           Float
  substrate    Float?
  notes        String?
  timestamp    DateTime   @default(now())
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId, timestamp])
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  points    Int      @default(0)
  expire    DateTime
  createdAt DateTime @default(now())

  @@index([key, expire])
}

model UserProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  avatar              String?
  expertise           String?
  interests           String   @default("[]")
  publicProfile       Boolean  @default(false)
  completedOnboarding Boolean  @default(false)
  onboardingStep      Int      @default(0)
  linkedIn            String?
  orcid               String?
  googleScholar       String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  experimentAlerts      Boolean  @default(true)
  collaborationRequests Boolean  @default(true)
  newsletter            Boolean  @default(false)
  theme                 String   @default("dark")
  units                 String   @default("metric")
  language              String   @default("en")
  dashboardLayout       String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ResearchPaper {
  id                String            @id @default(cuid())
  title             String
  authors           String            // JSON array
  abstract          String?
  doi               String?           @unique
  pubmedId          String?           @unique
  arxivId           String?           @unique
  ieeeId            String?           @unique
  publicationDate   DateTime?
  journal           String?
  volume            String?
  issue             String?
  pages             String?
  keywords          String            // JSON array
  externalUrl       String
  
  // MES-specific fields
  organismTypes     String?           // JSON array of organism IDs
  anodeMaterials    String?           // JSON array
  cathodeMaterials  String?           // JSON array
  powerOutput       Float?            // mW/m²
  efficiency        Float?            // percentage
  systemType        String?           // MFC, MEC, MDC, MES
  
  // Metadata
  source            String            // 'user', 'pubmed', 'crossref', 'ieee'
  uploadedBy        String?
  isPublic          Boolean           @default(true)
  
  // AI-generated fields
  aiSummary         String?           // Concise AI-generated summary
  aiKeyFindings     String?           // Key findings in JSON format
  aiMethodology     String?           // Summarized methodology
  aiImplications    String?           // Research implications and applications
  aiDataExtraction  String?           // Structured extracted data in JSON
  aiInsights        String?           // AI-generated insights and analysis
  aiProcessingDate  DateTime?         // When AI processing occurred
  aiModelVersion    String?           // Which AI model/version was used
  aiConfidence      Float?            // Confidence score for AI extraction (0-1)
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  experiments       ExperimentPaper[]
  
  @@index([title])
  @@index([publicationDate])
  @@index([aiProcessingDate])
}

model ExperimentPaper {
  id           String        @id @default(cuid())
  experimentId String
  paperId      String
  notes        String?
  citationType String?       // 'background', 'method', 'comparison'
  createdAt    DateTime      @default(now())
  
  experiment   Experiment    @relation(fields: [experimentId], references: [id])
  paper        ResearchPaper @relation(fields: [paperId], references: [id])
  
  @@unique([experimentId, paperId])
  @@index([experimentId])
  @@index([paperId])
}

// ============================================================================
// UNIFIED ELECTROCHEMICAL SYSTEMS MODELS
// ============================================================================

// Note: SQLite doesn't support enums, so we use String fields with validation in TypeScript

// Unified system model supporting both microbial and fuel cell systems
model ElectrochemicalSystem {
  id          String     @id @default(cuid())
  name        String
  type        String     // "MICROBIAL" or "FUEL_CELL"
  userId      String
  description String?
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations to specific system types
  fuelCellStacks FuelCellStack[]
  
  @@index([userId])
  @@index([type])
}

// Fuel cell stack configuration
model FuelCellStack {
  id                String                @id @default(cuid())
  systemId          String
  name              String
  type              String                // "PEM", "SOFC", "PAFC", "MCFC", "AFC"
  cellCount         Int
  activeArea        Float                 // cm²
  maxPower          Float                 // W
  nominalVoltage    Float                 // V
  operatingTemp     Float                 // °C
  operatingPressure Float                 // bar
  efficiency        Float?                // %
  membraneType      String?
  anodeCatalyst     String?
  cathodeCatalyst   String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  system            ElectrochemicalSystem @relation(fields: [systemId], references: [id], onDelete: Cascade)
  experiments       FuelCellExperiment[]
  
  @@index([systemId])
  @@index([type])
}

// Fuel cell experiment tracking
model FuelCellExperiment {
  id            String                  @id @default(cuid())
  name          String
  stackId       String
  userId        String
  status        String                  @default("SETUP") // SETUP, RUNNING, PAUSED, COMPLETED, FAILED
  modelFidelity String                  @default("BASIC") // "BASIC", "INTERMEDIATE", "ADVANCED"
  parameters    String                  // JSON configuration
  notes         String?
  isPublic      Boolean                 @default(false)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  
  stack         FuelCellStack           @relation(fields: [stackId], references: [id], onDelete: Cascade)
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  measurements  FuelCellMeasurement[]
  controlData   ControlSystemData[]
  
  @@index([userId])
  @@index([stackId])
  @@index([status])
}

// Detailed measurement data for fuel cell experiments
model FuelCellMeasurement {
  id                String             @id @default(cuid())
  experimentId      String
  timestamp         DateTime           @default(now())
  
  // Electrical measurements
  voltage           Float              // V
  current           Float              // A
  power             Float              // W
  efficiency        Float?             // %
  
  // Operating conditions
  temperature       Float              // °C
  pressure          Float              // bar
  humidity          Float?             // %
  
  // Gas flow measurements
  fuelFlowRate      Float?             // L/min
  airFlowRate       Float?             // L/min
  oxygenUtilization Float?             // %
  fuelUtilization   Float?             // %
  
  // Gas composition
  hydrogenPurity    Float?             // %
  nitrogenFraction  Float?             // %
  waterVaporContent Float?             // %
  
  // Performance metrics
  powerDensity      Float?             // W/cm²
  currentDensity    Float?             // A/cm²
  
  notes             String?
  
  experiment        FuelCellExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  
  @@index([experimentId, timestamp])
}

// Control system data for fuel cell experiments
model ControlSystemData {
  id           String             @id @default(cuid())
  experimentId String
  timestamp    DateTime           @default(now())
  
  // Thermal management
  thermalController String?        // JSON: {setpoint, output, error, pid_params}
  
  // Humidity control
  humidityController String?       // JSON: {setpoint, measured, output, control_action}
  
  // Pressure control
  pressureController String?       // JSON: {inlet_pressure, outlet_pressure, valve_position}
  
  // Purging control
  purgingController String?        // JSON: {purge_active, nitrogen_fraction, purge_duration}
  
  // Air intake control
  airIntakeController String?      // JSON: {compressor_speed, air_flow, pressure_ratio}
  
  // Stack monitoring
  stackController String?          // JSON: {cell_voltages, temperature_distribution, safety_status}
  
  experiment   FuelCellExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  
  @@index([experimentId, timestamp])
}

// Extended materials database supporting both microbial and fuel cell systems
model ElectrodeMaterial {
  id              String           @id @default(cuid())
  name            String
  category        String           // "TRADITIONAL", "GRAPHENE_BASED", "CARBON_NANOTUBES", "MXENES", "UPCYCLED", "FUEL_CELL_SPECIFIC"
  systemTypes     String           // JSON array of compatible system types
  
  // Basic properties
  conductivity    Float            // S/cm
  durability      Float            // 1-10 scale
  cost            Float            // $/m²
  density         Float?           // g/cm³
  
  // Microbial system properties
  biocompatibility Float?          // 1-10 scale
  surfaceArea     Float?           // m²/g
  
  // Fuel cell properties
  protonConductivity Float?        // S/cm
  oxygenPermeability Float?        // Barrer
  thermalStability   Float?        // °C max
  
  // Operating conditions
  temperatureRange String?         // e.g., "25-80°C"
  pressureRange    String?         // e.g., "1-10 bar"
  phRange          String?         // e.g., "6-8"
  
  // Performance characteristics
  electronTransfer Float?          // 1-10 scale
  corrosionResistance Float?       // 1-10 scale
  mechanicalStrength Float?        // MPa
  
  description     String?
  manufacturer    String?
  datasheet       String?          // URL to datasheet
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([category])
  @@index([name])
}

// Performance optimization results
model OptimizationResult {
  id           String   @id @default(cuid())
  experimentId String   // Can reference either regular or fuel cell experiments
  systemType   String   // "MICROBIAL" or "FUEL_CELL"
  
  // Optimization parameters
  algorithm    String   // e.g., "genetic_algorithm", "particle_swarm", "gradient_descent"
  objective    String   // e.g., "maximize_power", "maximize_efficiency", "minimize_cost"
  constraints  String   // JSON array of constraints
  
  // Results
  optimizedParams String // JSON of optimized parameters
  objectiveValue  Float  // Achieved objective value
  iterations      Int    // Number of optimization iterations
  convergence     Boolean // Whether optimization converged
  
  // Performance metrics
  improvement     Float? // % improvement over baseline
  confidence      Float? // Confidence in result (0-1)
  
  notes           String?
  createdAt       DateTime @default(now())
  
  @@index([systemType])
  @@index([createdAt])
}
